name: Studio - Build & Publish

on:
  push:
    tags:
      - "v*"
    paths-ignore:
      - "apps/sqltools/**"

jobs:

  create_draft_release:
    runs-on: "ubuntu-20.04"
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      assets_url: ${{ steps.create_release.outputs.assets_url }}
    steps:
      - name: Create or check draft release
        id: create_release
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ github.ref_name }}
          REPO: "beekeeper-studio/beekeeper-studio" # change this for ultimate
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = process.env.TAG_NAME;
            const [owner, repo] = process.env.REPO.split('/');

            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });

            let uploadUrl;
            let assetsUrl;

            const draftRelease = releases.data.find(
              release => release.tag_name === tagName && release.draft
            );

            if (draftRelease) {
              core.info(`Draft release with tag ${tagName} already exists.`);
              uploadUrl = draftRelease.upload_url;
              assetsUrl = draftRelease.assets_url;
            } else {
              const newRelease = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: 'Description of the release',
                draft: true,
                prerelease: false,
              });
              core.info(`Draft release created with tag ${tagName}: ${newRelease.data.html_url}`);
              uploadUrl = newRelease.data.upload_url;
              assetsUrl = newRelease.data.assets_url;
            }

            core.setOutput('upload_url', uploadUrl);
            core.setOutput('assets_url', assetsUrl);
  release:
    runs-on: ${{ matrix.os }}
    needs: create_draft_release
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}

    strategy:
      fail-fast: false
      matrix:
        # macos-13 is Intel, macos-14 is arm (obviously)
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        # os: [ubuntu-20.04, windows-2019, ubuntu-arm64, macos-13, macos-14 ]
        os: [macos-13, macos-14 ]

    steps:
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.gpg_key }}
        if: "startsWith(matrix.os, 'ubuntu')"

      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        if: "startsWith(matrix.os, 'windows')"

      - name: Install azuresigntool
        run: 'dotnet tool install --global AzureSignTool --version 4.0.1'
        if: "startsWith(matrix.os, 'windows')"

      - name: Check out Git repository
        uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - run: "curl -sLO https://github.com/deb-s3/deb-s3/releases/download/0.11.2/deb-s3-0.11.2.gem"
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '16.11.14'
        if: "startsWith(matrix.os, 'windows')"

      - run: "gem install -N ./deb-s3-0.11.2.gem"
        if: "startsWith(matrix.os, 'ubuntu-20.04')"

      - name: "Install python 3.8 (NOT Mac, NOT Ubuntu-arm)"
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
        if: "!startsWith(matrix.os, 'macos') && (matrix.os != 'ubuntu-arm64')"

      - name: Install python 3.8 (mac)
        if: "startsWith(matrix.os, 'macos')"
        run: |
          # Install Python 3.8
          brew install python@3.8
          # Add Python 3.8 to PATH
          echo "/opt/homebrew/opt/python@3.8/libexec/bin" >> $GITHUB_PATH
          export PATH="/opt/homebrew/opt/python@3.8/libexec/bin:$PATH"
          export PYTHON_PATH="/opt/homebrew/opt/python@3.8/libexec/bin/python3"

      - name: Verify Python Version
        if: "startsWith(matrix.os, 'windows')"
        run: |
          $PYTHON_VERSION = python --version | Out-String
          Write-Output "Installed Python version: $PYTHON_VERSION"
          if (-not $PYTHON_VERSION.StartsWith("Python 3.8")) {
            Write-Output "Error: Python version does not start with 3.8"
            exit 1
          }
        shell: powershell

      - name: Verify Python Version
        if: "!startsWith(matrix.os, 'windows') && (matrix.os != 'ubuntu-arm64')"
        run: |
          PYTHON_VERSION=$(python3 --version | cut -d " " -f 2)
          echo "Installed Python version: $PYTHON_VERSION"
          if [[ ! $PYTHON_VERSION == 3.8* ]]; then
            echo "Error: Python version does not start with 3.8"
            exit 1
          fi

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          skip_install: ${{ matrix.os == 'ubuntu-arm64' }}

      # We manage snapcraft ourselves on the arm box
      # and it could have old credentials
      # this will force it to use the env
      # key defined at the top of this file.
      - name: Snapcraft - logout
        run: "snapcraft logout"
        if: startsWith(matrix.os, 'ubuntu-arm64')
        continue-on-error: true


      - name: Clean cache
        run: yarn cache clean --all

      # FIXME (matthew) Windows needs retries. It sometimes fails to build
      # the native oracledb package.
      # But only sometimes. I cannot figure out why.
      # Someone should at some point.
      - name: yarn install (with retry)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: "yarn install --frozen-lockfile --network-timeout 100000"
        env:
          npm_config_node_gyp: ${{ github.workspace }}${{ runner.os == 'Windows' && '\node_modules\node-gyp\bin\node-gyp.js' || '/node_modules/node-gyp/bin/node-gyp.js' }}

      - name: Remove dist directory
        if: "!startsWith(matrix.os, 'windows')"
        run: rm -rf ./apps/studio/dist_electron
      - name: Remove dist directory windows
        if: startsWith(matrix.os, 'windows')
        run: Remove-Item dist_electron -Recurse -ErrorAction Ignore
      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.apple_key }}' > ~/private_keys/AuthKey_${{ secrets.apple_key_id }}.p8

      - name: Build and Publish (ARM Linux)
        run: cd apps/studio && ./build/arm-publish.sh
        if: startsWith(matrix.os, 'ubuntu-arm64')
        env:
          GH_TOKEN: ${{ secrets.github_token }}
          BT_TOKEN: ${{ secrets.bintray_apikey }}
          USE_SYSTEM_FPM: true
          SNAPCRAFT_BUILD_ENVIRONMENT: host

      - name: Build and Publish
        if: "!startsWith(matrix.os, 'ubuntu-arm64')"
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: apps/studio
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          skip_build: true
          use_vue_cli: true
          max_attempts: 2

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: true
          mac_certs: ${{ secrets.mac_dev }}
          mac_certs_password: ${{ secrets.mac_dev_pw }}
        env:
          APPLE_ID: ${{ secrets.apple_id }}
          APPLE_ID_PASSWORD: ${{ secrets.apple_id_password }}
          APPLE_TEAM_ID: "7KK583U8H2"
          KEYVAULT_AUTH: "${{secrets.keyvault_auth}}"
          KV_WIN_CERTIFICATE: "${{secrets.kv_win_certificate}}"
          PYTHON_PATH: "${{ startsWith(matrix.os, 'macos') && '/opt/homebrew/opt/python@3.8/libexec/bin/python3' || '$PYTHON_PATH' }}"
          PYTHONPATH: "${{ startsWith(matrix.os, 'macos') && '/opt/homebrew/opt/python@3.8/libexec/bin/python3' || '$PYTHONPATH' }}"


      - name: Publish DEB to S3
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          deb-s3 upload apps/studio/dist_electron/*.deb \
            --bucket=deb.beekeeperstudio.io \
            --lock \
            --sign=${{steps.import_gpg.outputs.keyid}} \
            --preserve-versions
        env:
          AWS_ACCESS_KEY_ID: "${{secrets.aws_access_key_id}}"
          AWS_SECRET_ACCESS_KEY: "${{secrets.aws_secret_access_key}}"
          AWS_DEFAULT_REGION: "us-east-1"
      - name: Invalidate cloudfront cache
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          aws cloudfront create-invalidation \
          --distribution "$DISTRIBUTION" \
          --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: "${{secrets.aws_access_key_id}}"
          AWS_SECRET_ACCESS_KEY: "${{secrets.aws_secret_access_key}}"
          DISTRIBUTION: ${{secrets.cloudfront_distribution}}
          AWS_DEFAULT_REGION: "us-east-1"
      - name: Cleanup artifacts
        if: "!startsWith(matrix.os, 'windows')"
        run: npx rimraf "apps/studio/dist_electron/!(*.exe|*.deb|*.rpm|*.AppImage|*.dmg|*.snap)"
      - name: Cleanup artifacts Win
        if: startsWith(matrix.os, 'windows')
        run: npx rimraf "apps/studio/dist_electron/!(*.exe)"
        continue-on-error: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: apps/studio/dist_electron


      # Mac nonsense -- we have to do separate builds for both architectures, then MERGE the latest-mac.yml files
      # together to create one cohesive update file.
      # Note that this works differently to linux, which has a linux-latest.yml and a linux-latest-arm.yml, oy.
      - name: Check architecture
        id: mac_arch
        if: startsWith(matrix.os, 'mac')
        run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Upload YML files (platform dependant)
        id: upload-latest-mac-variations-yml
        if: startsWith(matrix.os, 'mac')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.create_draft_release.outputs.upload_url}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./apps/studio/dist_electron/latest-mac.yml
          asset_name: "latest-mac-${{steps.mac_arch.outputs.arch}}.yml"
          asset_content_type: application/octet-stream

  post-release:
    needs: [release, create_draft_release]
    runs-on: ubuntu-latest
    steps:
      - run: npm install js-yaml
      - name: Download mac arch yml files
        id: get_files
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseAssetsUrl = '${{ needs.create_draft_release.outputs.assets_url }}';
            const { data: assets } = await github.request(releaseAssetsUrl, {
              headers: {
                authorization: `token ${{ secrets.GITHUB_TOKEN }}`,
                accept: 'application/vnd.github.v3+json',
              },
            });

            const assets.filter((asset) => asset.name.startsWith('latest-mac-'))

            if (!assets.length) {
              core.setFailed('Required assets not found in the release.');
              return;
            }

            const downloadAsset = async (asset) => {
              const filePath = `./${asset.name}`
              const response = await github.request({
                method: 'GET',
                url: asset.url,
                headers: {
                  authorization: `token ${{ secrets.GITHUB_TOKEN }}`,
                  accept: 'application/octet-stream',
                },
                responseType: 'stream',
              });

              const writer = require('fs').createWriteStream(filePath);
              response.data.pipe(writer);

              return new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
              });
            };
            await promise.all(assets.map((asset) => {
              downloadAsset(asset)
            }))

            const names = JSON.stringify(assets.map((a) => a.name))
            core.setOutput('files', names)

            core.info('Assets downloaded successfully.');
      - name: Merge yml files
        uses: actions/github-script@7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const files = ${{ steps.get_files.outputs.files }};
            const intel = files[0]
            const arm = files[1]
            const mergeFiles = (intel, arm) => {
              const intelObject = yaml.load(intel);
              const armObject = yaml.load(arm);

              const mergedObject = {
                ...intelObject,
              };

              mergedObject.files = [
                ...intelObject.files,
                ...armObject.files,
              ];

              const dumpOptions = {
                // avoids moving the sha512 checksum into its own line
                lineWidth: -1,
              };

              const mergedString = yaml.dump(mergedObject, dumpOptions);
              return mergedString;
            }
            const merge = mergeFiles(intel, arm)
            fs.writeFileSync('latest-mac.yml', merge)
      - name: Upload fixed file
        uses: actions/github-script@v7
        with:
          script: |
            // upload latest-mac.yml to the upload_url and overwrite any existing version
            const fs = require('fs')
            const uploadUrl = `${{ needs.create_draft_release.outputs.upload_url }}`
            const filePath = 'latest-mac.yml'
            const assetName = 'latest-mac.yml';

            async function findAssetIdByName(assets, name) {
              for (const asset of assets) {
                if (asset.name === name) {
                  return asset.id;
                }
              }
              return null;
            }

            // Get the existing assets for the release
            const { data: assets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

            // Check if the asset already exists and delete it if necessary
            const assetId = await findAssetIdByName(assets, assetName);
            if (assetId) {
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: assetId,
              });
              console.log(`Deleted existing asset: ${assetName}`);
            }


            const response = await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              headers: {
                authorization: `token ${{ secrets.GITHUB_TOKEN }}`,
                'content-type': 'application/octet-stream',
                'content-length': fs.statSync(filePath).size,
              },
              name: assetName,
              label: 'latest-mac.yml',
              data: fs.createReadStream(filePath),
            });

            if (response.status === 201) {
              core.info('File uploaded successfully');
            } else {
              core.error('Failed to upload file', response);
              process.exit(1)
            }
